package utils;

import io.restassured.*;
import io.restassured.response.*;
import io.restassured.specification.*;
import java.util.*;

public class RestApiHelper {

    static {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    }

    public static Response sendGetRequest(String url) {
        System.out.println("üîç –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å: " + url);
        try {
            Response response = RestAssured.given()
                    .header("Content-Type", "application/json")
                    .get(url);
            System.out.println("‚úÖ GET –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å: " + response.getStatusCode());
            return response;
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ GET –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞", e);
        }
    }

    public static Response sendPostRequest(String url, Map<String, Object> body) {
        System.out.println("üîç –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å: " + url);
        try {
            RequestSpecification request = RestAssured.given()
                    .header("Content-Type", "application/json");

            if (body != null && !body.isEmpty()) {
                request.body(body);
            }

            Response response = request.post(url);
            System.out.println("‚úÖ POST –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å: " + response.getStatusCode());
            return response;
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ POST –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞", e);
        }
    }

    public static Response sendPutRequest(String url, Map<String, Object> body) {
        System.out.println("üîç –í—ã–ø–æ–ª–Ω—è–µ–º PUT –∑–∞–ø—Ä–æ—Å: " + url);
        try {
            RequestSpecification request = RestAssured.given()
                    .header("Content-Type", "application/json");

            if (body != null && !body.isEmpty()) {
                request.body(body);
            }

            Response response = request.put(url);
            System.out.println("‚úÖ PUT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å: " + response.getStatusCode());
            return response;
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ PUT –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞", e);
        }
    }

    public static Response sendDeleteRequest(String url) {
        System.out.println("üîç –í—ã–ø–æ–ª–Ω—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å: " + url);
        try {
            Response response = RestAssured.given()
                    .header("Content-Type", "application/json")
                    .delete(url);
            System.out.println("‚úÖ DELETE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å: " + response.getStatusCode());
            return response;
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DELETE –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞", e);
        }
    }

    public static int getStatusCode(Response response) {
        return response.getStatusCode();
    }

    public static String getResponseBody(Response response) {
        return response.getBody().asString();
    }

    public static long getResponseTime(Response response) {
        return response.getTime();
    }

    public static String getJsonFieldValue(Response response, String fieldPath) {
        try {
            return response.jsonPath().getString(fieldPath);
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—è '" + fieldPath + "': " + e.getMessage());
            return null;
        }
    }

    public static int getJsonArraySize(Response response, String arrayPath) {
        try {
            return response.jsonPath().getList(arrayPath).size();
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Å—Å–∏–≤–∞: " + e.getMessage());
            return 0;
        }
    }
}